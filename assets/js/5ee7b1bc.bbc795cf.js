"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[743],{7163:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var t=n(4848),a=n(8453);const s={title:"Glossary",sidebar_position:4,customIcon:"fa-solid fa-brain"},o=void 0,r={id:"concepts/glossary",title:"Glossary",description:"Consensus Client",source:"@site/docs/concepts/glossary.md",sourceDirName:"concepts",slug:"/concepts/glossary",permalink:"/concepts/glossary",draft:!1,unlisted:!1,editUrl:"https://github.com/slabsxyz/docs/tree/main/docs/concepts/glossary.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Glossary",sidebar_position:4,customIcon:"fa-solid fa-brain"},sidebar:"tutorialSidebar",previous:{title:"Concepts",permalink:"/category/concepts"}},l={},c=[{value:"Consensus Client",id:"consensus-client",level:3},{value:"Data Availability",id:"data-availability",level:3},{value:"Execution Client",id:"execution-client",level:3},{value:"Indexed Merkle Tree",id:"indexed-merkle-tree",level:3},{value:"Key-value Store",id:"key-value-store",level:3},{value:"Light Node",id:"light-node",level:3},{value:"Merkle Tree",id:"merkle-tree",level:3},{value:"Modular Blockchain",id:"modular-blockchain",level:3},{value:"Session Key",id:"session-key",level:3}];function d(e){const i={a:"a",h3:"h3",p:"p",strong:"strong",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h3,{id:"consensus-client",children:"Consensus Client"}),"\n",(0,t.jsxs)(i.p,{children:["A ",(0,t.jsx)(i.strong,{children:"consensus client"})," in a blockchain node implements the network's consensus mechanism, ensuring that the blockchain reaches agreement on valid data by verifying the information provided by the execution client. It enables nodes to synchronize and maintain the correct blockchain state across the network."]}),"\n",(0,t.jsx)(i.h3,{id:"data-availability",children:"Data Availability"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Data availability"})," refers to the guarantee that transaction data in a blockchain is published and accessible to all network participants for verification. It ensures that the data required to validate a blockchain\u2019s state is publicly available, preventing malicious actors from withholding critical information while claiming valid execution."]}),"\n",(0,t.jsx)(i.h3,{id:"execution-client",children:"Execution Client"}),"\n",(0,t.jsxs)(i.p,{children:["An ",(0,t.jsx)(i.strong,{children:"execution client"})," in a blockchain node processes incoming transactions, executes them in the virtual machine, and maintains the current state and database of all network data. It is responsible for listening to new transactions and updating the blockchain's ledger accordingly."]}),"\n",(0,t.jsx)(i.h3,{id:"indexed-merkle-tree",children:"Indexed Merkle Tree"}),"\n",(0,t.jsxs)(i.p,{children:["An ",(0,t.jsx)(i.strong,{children:"Indexed Merkle tree"})," is a variant of the ",(0,t.jsx)(i.a,{href:"/concepts/glossary/#merkle-tree",children:"Merkle Tree"})," where each data element is associated with a specific index, enabling more efficient lookup and verification. This structure enhances data retrieval by ensuring that the position of each piece of data within the tree is explicitly defined, optimizing the process of generating proofs for individual elements."]}),"\n",(0,t.jsx)(i.h3,{id:"key-value-store",children:"Key-value Store"}),"\n",(0,t.jsxs)(i.p,{children:["A ",(0,t.jsx)(i.strong,{children:"key-value store"})," is a type of database that stores data as a collection of key-value pairs, where each key is unique and maps to a specific value. It allows for efficient retrieval of values based on their associated keys, commonly used in caching and simple data retrieval scenarios."]}),"\n",(0,t.jsxs)(i.p,{children:["In the case of a keystore network, this is structured as a ",(0,t.jsx)(i.a,{href:"/concepts/glossary/#merkle-tree",children:"Merkle Tree"}),". Specifically, an ",(0,t.jsx)(i.a,{href:"/concepts/glossary/#indexed-merkle-tree",children:"Indexed Merkle Tree"}),", which optimizes for its access purpose."]}),"\n",(0,t.jsx)(i.h3,{id:"light-node",children:"Light Node"}),"\n",(0,t.jsxs)(i.p,{children:["A ",(0,t.jsx)(i.strong,{children:"light node"})," is a type of blockchain node that only downloads and verifies block headers rather than the full blockchain, allowing it to operate with minimal resource requirements. By requesting additional data from full nodes (or its modular components such as ",(0,t.jsx)(i.a,{href:"/concepts/glossary/#data-availability",children:"data availability"})," layer) when needed and verifying it against the block headers, light nodes provide access to the blockchain's functionality and security guarantees without the need for powerful hardware, making them suitable for lightweight devices and specialized networks like keystores."]}),"\n",(0,t.jsx)(i.h3,{id:"merkle-tree",children:"Merkle Tree"}),"\n",(0,t.jsxs)(i.p,{children:["A ",(0,t.jsx)(i.strong,{children:"Merkle tree"})," is a cryptographic data structure that organizes data into a tree-like format, where each leaf node represents a hash of a data block, and each non-leaf node is a hash of its child nodes. This structure allows efficient and secure verification of large sets of data by providing a single root hash that represents the entire dataset, with proofs for individual data points requiring only a small portion of the tree."]}),"\n",(0,t.jsx)(i.h3,{id:"modular-blockchain",children:"Modular Blockchain"}),"\n",(0,t.jsxs)(i.p,{children:["A ",(0,t.jsx)(i.strong,{children:"modular blockchain"})," is a blockchain architecture that separates core functions such as execution, consensus, and data availability into specialized layers, allowing each layer to focus on one or more specific tasks. This modular approach enhances scalability, flexibility, and efficiency by enabling different blockchains to collaborate and optimize for specific roles, rather than handling all functions within a single, monolithic chain."]}),"\n",(0,t.jsx)(i.h3,{id:"session-key",children:"Session Key"}),"\n",(0,t.jsxs)(i.p,{children:["A ",(0,t.jsx)(i.strong,{children:"session key"})," in Web3 is a temporary, limited-permission credential that allows users or AI agents to perform specific transactions or actions on behalf of a primary account without requiring repeated wallet authentications. It consists of a signing key and a configuration that defines its permissions, such as asset usage, transaction limits, and expiration, enabling seamless interaction with decentralized applications while maintaining security."]})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>r});var t=n(6540);const a={},s=t.createContext(a);function o(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);